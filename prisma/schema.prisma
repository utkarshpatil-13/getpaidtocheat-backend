generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String    @unique
  password  String
  role      String    @default("moderator")
  createdAt DateTime  @default(now())
  contents  Content[] @relation("AdminContent")
}

model User {
  id                  String               @id @default(uuid())
  username            String               @unique
  email               String               @unique
  discordId           String               @unique
  avatarUrl           String?
  ipAddress           String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  refreshToken        String?              @unique
  stripeCustomerId    String?              @unique
  stripeAccountId     String?              @unique
  stripeAccountStatus String?              @default("pending")
  accessToken         String?              @unique
  videos              Content[]
  payouts             Payout[]
  rewards             Reward[]
  socialAccounts      SocialMediaAccount[]
  subscription        Subscription?
  transactions        Transaction[]
}

model Subscription {
  id                   String        @id @default(uuid())
  userId               String        @unique
  stripeCustomerId     String        @unique
  status               String        @default("active")
  startDate            DateTime      @default(now())
  endDate              DateTime
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  paymentStatus        String        @default("paid")
  planId               String
  productId            String
  renewalDate          DateTime?
  stripeSubscriptionId String        @unique
  user                 User          @relation(fields: [userId], references: [id])
  transactions         Transaction[]
}

model Content {
  id             String             @id @default(uuid())
  userId         String
  title          String
  description    String
  videoUrl       String
  thumbnailUrl   String?
  status         String             @default("pending")
  uploadedAt     DateTime           @default(now())
  verifiedAt     DateTime?
  adminId        String?
  youtubeVideoId String             @unique
  admin          Admin?             @relation("AdminContent", fields: [adminId], references: [id])
  user           User               @relation(fields: [userId], references: [id])
  metrics        EngagementMetrics?
  payout         Payout?
}

model SocialMediaAccount {
  id            String    @id @default(uuid())
  userId        String
  platform      String
  accountId     String    @unique
  accountName   String
  linkedAt      DateTime  @default(now())
  access_token  String?
  refresh_token String?
  token_expiry  DateTime?
  user          User      @relation(fields: [userId], references: [id])

  @@unique([userId, platform])
}

model EngagementMetrics {
  id              String   @id @default(uuid())
  views           Int      @default(0)
  likes           Int      @default(0)
  comments        Int      @default(0)
  engagementScore Float    @default(0.0)
  updatedAt       DateTime @updatedAt
  contentId       String   @unique
  createdAt       DateTime @default(now())
  lastPayoutViews Int      @default(0)
  content         Content  @relation(fields: [contentId], references: [id])
}

model Payout {
  id               String   @id @default(uuid())
  userId           String
  status           String   @default("pending")
  amountDisbursed  Float    @default(0.0)
  amountEarned     Float    @default(0.0)
  balanceDue       Float    @default(0.0)
  contentId        String   @unique
  createdAt        DateTime @default(now())
  incrementalViews Int      @default(0)
  totalViews       Int      @default(0)
  updatedAt        DateTime @updatedAt
  content          Content  @relation(fields: [contentId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id             String        @id @default(uuid())
  amount         Float
  transactionId  String
  paymentMethod  String
  status         String        @default("pending")
  createdAt      DateTime      @default(now())
  subscriptionId String?
  updatedAt      DateTime      @updatedAt
  userId         String
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
}

model Reward {
  id           String   @id @default(uuid())
  userId       String
  title        String
  description  String
  rewardPoints Float
  issuedAt     DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}
